var async = require('async'), 
fs = require('fs'), 
http = require('http'), 
util = require('util');

var stream = require('stream');

function skipTag(pos, buf)
{
	++pos;
	var len = buf[pos];
	if (len < 0x80) {
		return {pos: (pos+1), len: len};
	} else {
		len -= 0x80;
		pos += len + 1;
		return {pos: pos};
	}
}
function skipContent(pos, buf)
{
	++pos;
	var len = buf[pos];
	if (len < 0x80) {
		pos += 1 + len;
		return {pos: pos};
	} else {
		len -= 0x80;
		pos += len + 1;
		return {pos: pos};
	}
}


function findIssuer(buf)
{
	var root = skipTag(0, buf);
	var tbsCert = skipTag(root.pos, buf);
	var serial;
	if (buf[tbsCert.pos] == 0xA0) {
		serial = skipContent(tbsCert.pos, buf);
	} else {
		serial = tbsCert;
	}
	
	var algType = skipContent(serial.pos, buf);
	var issuer = skipContent(algType.pos, buf);
	
	return skipTag(issuer.pos, buf);
}


var cdbwr = require('./writable-cdb.js');

var v = {};
v.cert = new Buffer([
	0x30, 0x82, 0x03, 0x0A, 0x30, 0x82, 0x01, 0xF2, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 
	0xD3, 0xC8, 0xB1, 0x20, 0x09, 0xBE, 0x88, 0x93, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 
	0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x21, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 
	0x04, 0x06, 0x13, 0x02, 0x52, 0x55, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 
	0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x35, 
	0x31, 0x30, 0x31, 0x32, 0x31, 0x34, 0x33, 0x31, 0x34, 0x33, 0x5A, 0x17, 0x0D, 0x32, 0x35, 0x31, 
	0x30, 0x30, 0x39, 0x31, 0x34, 0x33, 0x31, 0x34, 0x33, 0x5A, 0x30, 0x21, 0x31, 0x0B, 0x30, 0x09, 
	0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x52, 0x55, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 
	0x04, 0x03, 0x13, 0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x30, 0x82, 0x01, 
	0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 
	0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xB6, 0x46, 
	0x6F, 0x61, 0x13, 0x77, 0x4B, 0x84, 0xB3, 0xB7, 0xB7, 0x20, 0x2A, 0xC6, 0x4D, 0x3C, 0x38, 0x85, 
	0x20, 0x2E, 0x3A, 0xDE, 0xF5, 0x79, 0xB9, 0x56, 0x06, 0xAA, 0x51, 0x60, 0xF2, 0xE7, 0x7D, 0x57, 
	0x7D, 0x62, 0x4B, 0x07, 0x80, 0x15, 0xB7, 0x75, 0x75, 0xAB, 0xDE, 0x26, 0x36, 0x0F, 0xDE, 0xE8, 
	0xB5, 0x3D, 0xD2, 0x9D, 0x47, 0xEE, 0xAA, 0x88, 0x50, 0x18, 0xDE, 0x4B, 0xE0, 0x45, 0xEE, 0xFD, 
	0x90, 0xBB, 0xA9, 0x21, 0x4B, 0xC3, 0x4E, 0xAA, 0xA8, 0x52, 0x88, 0x7C, 0xE7, 0x2F, 0xE5, 0x90, 
	0x0F, 0x06, 0x8C, 0x4A, 0x05, 0x39, 0x31, 0x9B, 0x19, 0x3C, 0x17, 0x2D, 0x91, 0x58, 0x9B, 0x7E, 
	0xB4, 0xF0, 0xD3, 0xB3, 0x51, 0xA5, 0x5A, 0x2E, 0x6A, 0x00, 0x59, 0xAF, 0xDF, 0x80, 0x80, 0x97, 
	0xA9, 0xA1, 0xBC, 0xAC, 0x6F, 0x66, 0x2C, 0xE4, 0xB6, 0x75, 0x1C, 0xEF, 0x9D, 0x82, 0x5D, 0xBF, 
	0x6A, 0xAB, 0xC1, 0x02, 0x3A, 0xAC, 0x0C, 0x0C, 0x4E, 0xA5, 0xAD, 0x7E, 0x5A, 0x18, 0xD3, 0x8C, 
	0xE3, 0x2C, 0x39, 0x8B, 0x2D, 0xA4, 0x0E, 0x22, 0xBA, 0x78, 0xA3, 0x87, 0xAE, 0x84, 0x0D, 0x3B, 
	0x65, 0x5F, 0x85, 0x26, 0xCD, 0xDB, 0xBC, 0x3D, 0x84, 0x76, 0xE4, 0x57, 0xCA, 0xB9, 0x06, 0xC1, 
	0x95, 0xF9, 0x2F, 0x5B, 0x06, 0x4E, 0x55, 0x20, 0xDA, 0xE7, 0xB4, 0xB7, 0x0D, 0x8C, 0x94, 0xCA, 
	0x71, 0xD9, 0x16, 0x33, 0xEC, 0x11, 0x99, 0x3B, 0x90, 0x4A, 0x58, 0xB9, 0x57, 0x40, 0x5E, 0x6A, 
	0x5B, 0x86, 0x18, 0xF7, 0x3A, 0x84, 0xB5, 0x17, 0x7A, 0x94, 0x01, 0x48, 0x17, 0x6A, 0x73, 0x5B, 
	0x0B, 0xE4, 0x85, 0x0E, 0xF1, 0x04, 0xD7, 0xD3, 0xAA, 0x67, 0x50, 0x7C, 0xDD, 0xA4, 0x9B, 0x23, 
	0xA0, 0xE9, 0x1E, 0xFD, 0xB0, 0x48, 0xCC, 0x12, 0x19, 0x83, 0xD0, 0xB1, 0x9B, 0x0B, 0x02, 0x03, 
	0x01, 0x00, 0x01, 0xA3, 0x45, 0x30, 0x43, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 
	0x04, 0x14, 0xE1, 0x5A, 0x7F, 0x17, 0x66, 0x91, 0xD5, 0xC9, 0xE4, 0xB5, 0x83, 0xB1, 0x8E, 0xB1, 
	0xA0, 0xA3, 0x14, 0xC6, 0x9A, 0x3C, 0x30, 0x0C, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x05, 0x30, 
	0x03, 0x01, 0x01, 0xFF, 0x30, 0x14, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x0D, 0x30, 0x0B, 0x82, 
	0x09, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 
	0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0xA4, 0x9A, 
	0x97, 0xCD, 0xAC, 0x0F, 0x14, 0x64, 0x71, 0x15, 0x8F, 0x79, 0x8D, 0x13, 0x6C, 0x43, 0x95, 0xBE, 
	0x48, 0xF3, 0x43, 0x0D, 0x28, 0x22, 0x56, 0x69, 0xBA, 0xD3, 0x78, 0x3B, 0xA7, 0xA7, 0x5F, 0xBF, 
	0x22, 0x59, 0x2E, 0x93, 0xE6, 0xD5, 0xB9, 0xA5, 0x9F, 0x2C, 0x7D, 0xDD, 0x2D, 0xC3, 0x66, 0x5C, 
	0x1D, 0x88, 0xDB, 0x18, 0x39, 0xB5, 0x3B, 0xC2, 0xEE, 0x15, 0x82, 0x44, 0x1F, 0xE0, 0x76, 0x7C, 
	0xC6, 0x36, 0x80, 0xB7, 0x85, 0xFB, 0x52, 0x29, 0x89, 0xA9, 0x26, 0x9D, 0x50, 0x3A, 0xBA, 0x6C, 
	0x6F, 0xD8, 0xEB, 0xAE, 0x07, 0xE3, 0x93, 0x2E, 0x0A, 0x3E, 0x47, 0x03, 0x33, 0xC6, 0x18, 0x3D, 
	0x26, 0x41, 0x93, 0xCE, 0x0C, 0xFD, 0xE7, 0x79, 0xBB, 0xDC, 0xF1, 0x2D, 0xDD, 0x47, 0xF5, 0x68, 
	0x25, 0x79, 0x6A, 0x76, 0xA8, 0x0C, 0xF5, 0x71, 0x29, 0x46, 0x53, 0xF7, 0x45, 0x51, 0x4D, 0x1F, 
	0x87, 0x64, 0x59, 0x41, 0x9E, 0x1D, 0x63, 0xFD, 0x14, 0x2D, 0xD2, 0x13, 0x39, 0xB4, 0xA2, 0xC7, 
	0xC1, 0xD7, 0x97, 0xC4, 0xE7, 0xED, 0x50, 0xAB, 0xF4, 0x00, 0x3A, 0x92, 0xDE, 0xAC, 0x64, 0x33, 
	0xE9, 0x1D, 0x26, 0xDF, 0x8D, 0x6F, 0x4D, 0xEB, 0x40, 0x4A, 0x0E, 0x41, 0xAE, 0x67, 0x1C, 0x10, 
	0x90, 0xFF, 0xE0, 0x40, 0x5E, 0xA4, 0xF8, 0x6B, 0xC6, 0xC1, 0x9E, 0xAE, 0xB8, 0x6F, 0x35, 0x02, 
	0x84, 0x76, 0xDA, 0x96, 0x9C, 0xA2, 0x54, 0x0C, 0xDE, 0x21, 0xC4, 0xC9, 0x81, 0xB1, 0xF3, 0x14, 
	0x11, 0x31, 0x13, 0xCF, 0xC6, 0x20, 0xB0, 0x4F, 0x6B, 0xDB, 0x72, 0x6F, 0x10, 0x24, 0xB8, 0x41, 
	0x23, 0xE3, 0x04, 0x25, 0xEB, 0xCB, 0xE9, 0x83, 0x23, 0x76, 0x50, 0xEC, 0x51, 0x1F, 0xC5, 0x8F, 
	0x20, 0xAF, 0x72, 0xE3, 0x4A, 0xA9, 0x16, 0x63, 0x49, 0x69, 0x34, 0x55, 0x11, 0x9A
]);

var issuer_pos = findIssuer(v.cert);
v.issuer = v.cert.slice(issuer_pos.pos, issuer_pos.pos + issuer_pos.len);

async.waterfall([
	function(cb) {
		var wr = new cdbwr('./calist.db');
		
		wr.open(function(err) {
			wr.put(v.issuer, v.cert);
			wr.close(cb);
		});
	}
], function(err) {
	if (err) {
		console.log("[ERROR] " + err);
		return;
	}
});